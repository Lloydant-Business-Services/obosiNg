@using Obosi.ng.Application.Interfaces;
@using System.Security.Claims;
@model Obosi.ng.Presentation.ViewModels.UserDashboardViewModel
@inject IPostService postService;
@{
    Layout = "~/Views/Shared/_SocialLayout.cshtml";
}

<style>
    .form-check-input {
        cursor: pointer;
    }

        .form-check-input:checked {
            background-color: #198754; /* Bootstrap's .bg-success color */
            border-color: #198754; /* Bootstrap's .bg-success color */
        }

        .form-check-input:focus {
            box-shadow: 0 0 0 0.25rem rgba(25, 135, 84, 0.25); /* Light green shadow */
        }

    .form-check-label {
        cursor: pointer;
        user-select: none; /* Prevent text selection */
    }

    .button-style {
        background: none; /* Removes the default background */
        border: none; /* Removes the default border */
        outline: none; /* Removes the focus outline */
        color: inherit; /* Inherits text color from parent */
        text-align: left; /* Aligns text to the left like a typical anchor */
        cursor: pointer; /* Changes the cursor to indicate it's clickable */
    }

        .button-style:hover, .button-style:focus {
            text-decoration: underline; /* Adds underline on hover/focus like a typical anchor */
            outline: none; /* Ensures no outline appears on focus */
        }



        /* Base styles */
.card-body {
    flex-wrap: wrap;  /* Allows items to wrap onto the next line as needed */
    gap: 10px;        /* Adds space between flex items */
}

/* Style adjustments for smaller screens */
@@media (max-width: 768px) {
    .card-body {
        flex-direction: column; /* Stack elements vertically on smaller screens */
    }

    .card-body .form-check, 
    .card-body label, 
    .card-body button {
        flex: 0 0 100%; /* Make each child take full width of the container */
        max-width: 100%; /* Ensures no overflow */
        justify-content: center; /* Center align the content for better visual balance */
        text-align: center; /* Center text for labels and buttons */
    }

    .card-body label i, .card-body .form-check-label i {
        margin-right: 10px; /* Adjust spacing around icons */
    }

    .card-body button {
        margin-top: 10px; /* Adds a top margin to the button for spacing */
    }
}

/* Adjusting the look of icons and text size for better mobile experience */
@@media (max-width: 480px) {
    .card-body .font-md {
        font-size: 14px; /* Smaller icon size */
    }

    .card-body .font-xssss, .card-body .fw-600 {
        font-size: 12px; /* Smaller text size for better readability on small devices */
    }
}

    .span-bg-default {
        background-color: initial;
    }

    .span-bg-changed {
        background-color: red;
    }

   
    .liked .fa-heart {
        color: red; /* Change heart color when liked */
    }

    .bg-transparent{
        background-color: grey;
    }

</style>


<script>
    document.getElementById('publicPrivateSwitch').addEventListener('change', function () {
        var label = this.nextElementSibling.querySelector('span');
        label.textContent = this.checked ? 'Public' : 'Private';
    });
</script>
       

            <div class="middle-sidebar-bottom">
                <div class="middle-sidebar-left">
                    <!-- loader wrapper -->
                    <div class="preloader-wrap p-3">
                        <div class="box shimmer">
                            <div class="lines">
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                            </div>
                        </div>
                        <div class="box shimmer mb-3">
                            <div class="lines">
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                            </div>
                        </div>
                        <div class="box shimmer">
                            <div class="lines">
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                                <div class="line s_shimmer"></div>
                            </div>
                        </div>
                    </div>
                    <!-- loader wrapper -->
                    <div class="row feed-body">
                        <div class="col-xl-12 col-xxl-12 col-lg-12">


                <form asp-action="Posts" method="post" enctype="multipart/form-data" >

                            <div class="card w-100 shadow-xss rounded-xxl border-0 ps-4 pt-4 pe-4 pb-3 mb-3">
                                <div class="card-body p-0">
                                    <a href="#" class=" font-xssss fw-600 text-grey-500 card-body p-0 d-flex align-items-center" disabled>Create Post</a>
                                </div>
                                <div class="card-body p-0 mt-3 position-relative">
                                   
                        <figure class="avatar position-absolute ms-2 mt-1 top-5">
                             @if (string.IsNullOrWhiteSpace(Model.Users.PassportUrl))
    {
                                    <img src="/images.jpg" alt="image" class="shadow-sm "
                                         style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;">
    }else{
                            <img src="/@Model.Users.PassportUrl" alt="image" class="shadow-sm"
                                         style="width: 30px; height: 30px; border-radius: 50%; object-fit: cover;">
                                }
                            </figure>
                            <textarea name="Comment" class="h100 bor-0 w-100 rounded-xxl p-2 ps-5 font-xssss text-grey-500 fw-500 border-light-md theme-dark-bg"
                                      cols="30" rows="10" placeholder="What's on your mind?" asp-for="Comment" required></textarea>
                                </div>
                                <div class="card-body  d-flex flex-column flex-md-row p-0 mt-0">
                                
                        <label class="d-flex align-items-center font-xssss fw-600 ls-1 text-grey-700 text-dark pe-4" style="cursor: pointer;">
                            <i class="font-md text-success feather-image me-2"></i><span>Photo</span>
                                <input type="file" accept="image/*" style="display: none;" asp-for="Pictures" multiple name="Pictures"
                                       onchange="loadFiles(event)" />
                              
                            </label>

                        <!-- For uploading videos -->
                        <label class="d-flex align-items-center font-xssss fw-600 ls-1 text-grey-700 text-dark pe-4" style="cursor: pointer;">
                            <i class="font-md text-warning feather-camera me-2"></i><span>Video</span>
                                <input type="file" accept="video/*" style="display: none;" asp-for="Videos"  name="Videos"
                                       onchange="loadVideos(event)">
                        </label>
                          @*   <div class="form-check form-switch d-flex align-items-center font-xssss fw-600 ls-1 
                         text-grey-700 text-dark pe-4"> *@
                               
                                <label class="form-check-label d-flex align-items-center
font-xssss fw-600 ls-1 text-grey-700 text-dark pe-4" for="publicPrivateSwitch">
                                    <i class="font-md text-warning feather-eye me-2"></i>
                                    <span>Private </span>
                                    <input class="form-check-input" type="checkbox" id="publicPrivateSwitch" asp-for="IsPrivate">
                                 
                                   
                                </label>
                          @*   </div> *@

                        
                        <button type="submit" class="font-xssss fw-600 text-grey-500  p-0 d-flex align-items-center button-style ms-auto" 
            >
                                <i class="btn-round-sm font-xs text-primary feather-edit-3 me-2 bg-greylight"></i>Create Post
                            </button> 

                                
                                </div>

                        <div id="imageContainer"></div>
                        <div id="videoContainer"></div>
                            </div>


                           </form>
                          

                          
                           @foreach(var item in Model.Posts){

                   
                            <div class="card w-100 shadow-xss rounded-xxl border-0 p-4 mb-3">
                                <div class="card-body p-0 d-flex">
                               
                        <figure class="avatar me-3">
                                @if (string.IsNullOrWhiteSpace(item.User.PassportUrl))
                                {
                                  
                                    <img src="/images.jpg" alt="image" class="shadow-sm "
                                         style="width: 45px; height: 45px; border-radius: 50%; object-fit: cover;"
                                             onclick="window.location.href='/user/ViewUsersProfile?Id=@item.UserId';">
                                }
                                else
                                {
                            <img src="/@item.User.PassportUrl" alt="image" class="shadow-sm  "
                                         style="width: 45px; height: 45px; border-radius: 50%; object-fit: cover;"
                                                 onclick="window.location.href='/user/ViewUsersProfile?Id=@item.UserId';">
                                }
                            </figure>
                                <h4 class="fw-700 text-grey-900 font-xssss mt-1" onclick="window.location.href='/user/ViewUsersProfile?Id=@item.UserId';">
                                @item.User.FirstName @item.User.LastName
                                <span class="d-block font-xssss fw-500 mt-1 lh-3 text-grey-500">@StringEncryption.GetTimeDifference(@item.DateAdded)</span></h4>
                                    @* <a href="#" class="ms-auto" id="dropdownMenu5" data-bs-toggle="dropdown" aria-expanded="false"><i class="ti-more-alt text-grey-900 btn-round-md bg-greylight font-xss"></i></a> *@
                               
                            </div>

                        <div class="card-body p-0 me-lg-5">
                            <p class="fw-700 text-black lh-26 font-xssss w-100 mb-2"><b>@item.PostContent</b></p>
                        </div>
                        @if (item.Videos.FirstOrDefault() != "")
                        {
                            <div class="card-body p-0 mb-3 rounded-3 overflow-hidden">

                                <video loop class="float-right w-100" controls style="height: 600px;">
                                        <source src="/@item.Videos.FirstOrDefault()" type="video/mp4">
                                    </video>
                            
                            </div>
                        }

                      
                        
                        @if (item.Photos != null)
                        {
                            <div class="card-body d-block p-0 mb-3">
                                @if (item.Photos.Count == 1)
                                {
                                    <div class="col-xs-12 col-sm-12 p-1">
                                        <a href="#" data-lightbox="roadtri">
                                            <img src="/@item.Photos[0]" class="rounded-3 w-100" alt="image" style="height: 600px;">
                                        </a>
                                    </div>
                                }
                                else if (item.Photos.Count == 2)
                                {
                                    @for (int i = 0; i < item.Photos.Count(); i += 3) // Loop in steps of 3 for row grouping
                                    {
                                        <div class="row ps-2 pe-2">
                                            @for (int j = i; j < i + 2 && j < item.Photos.Count(); j++) // Inner loop for columns
                                            {
                                                <div class="col-xs-6 col-sm-6 p-1">
                                                    <a href="#" data-lightbox="roadtri">
                                                        <img src="/@item.Photos[j]" class="rounded-3 w-100" alt="image" style="height: 600px;">
                                                    </a>
                                                </div>
                                            }
                                        </div>
                                    }
                                }

                                else{
                                @for (int i = 0; i < item.Photos.Count(); i += 3) // Loop in steps of 3 for row grouping
                                {
                                    <div class="row ps-2 pe-2">
                                        @for (int j = i; j < i + 3 && j < item.Photos.Count(); j++) // Inner loop for columns
                                        {
                                            <div class="col-xs-4 col-sm-4 p-1">
                                                <a href="#" data-lightbox="roadtri">
                                                    <img src="/@item.Photos[j]" class="rounded-3 w-100" alt="image">
                                                </a>
                                            </div>
                                        }
                                    </div>
                                }
                                }
                            </div>
                        }

                    
                                <div class="card-body d-flex p-0">
                                    @{
                                        var likecount = await postService.LikedPostCount(item.Id);
                                var isLiked = await postService.LikedPost(item.Id, Convert.ToInt64(User.FindFirst(ClaimTypes.Sid).Value));
                                    }
                            <a href="#" onclick="likePost(@item.Id)" id="emoji-btn" class="emoji-bttn d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss me-2">
                                @if (isLiked)
                                {
                                    <i id="@item.Id" class="feather-heart text-white span-bg-changed me-2 btn-round-xs font-xss"></i>
                                }
                                else
                                {
                                    <i id="@item.Id" class="feather-heart text-white bg-transparent me-2 btn-round-xs font-xss"></i> 
                                }          
                                @* <i id="@item.Id" class="feather-heart text-white bg-transparent me-2 btn-round-xs font-xss"></i> *@
                               @likecount Like 
                                        
                                    </a>

                          
                                   
                                <a href="~/UserDashBoard/Post?Id=@item.Id" class="d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss"><i class="feather-message-circle text-dark text-grey-900 btn-round-sm font-lg"></i><span class="d-none-xss">Comment</span></a>
                            <a href="#" class="ms-auto d-flex align-items-center fw-600 text-grey-900 text-dark lh-26 font-xssss" onclick="sharePost(event,`@item.PostContent`,`@item.Id.ToString()`)"><i class="feather-share-2 text-grey-900 text-dark btn-round-sm font-lg"></i><span class="d-none-xs">Share</span></a>
                           @*  <a href="#" class=" fw-600 text-grey-900 text-dark lh-26 font-xssss" onclick="sharePost(event,`@item.PostContent`,`@item.Id.ToString()`)"><i class="feather-trash text-grey-900 text-dark btn-round-sm font-lg"></i><span class="d-none-xs"></span></a>
 *@

                        </div>
                            </div>

                  
                            }
                            




                            <div class="card w-100 text-center shadow-xss rounded-xxl border-0 p-4 mb-3 mt-3">
                                <div class="snippet mt-2 ms-auto me-auto" data-title=".dot-typing">
                                    <div class="stage">
                                        <div class="dot-typing"></div>
                                    </div>
                                </div>
                            </div>


                        </div>
                       

                    </div>
                </div>

            </div>



<div id="feedContainer"></div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        var page = 1; // Start from the first page
        var pageSize = 10; // Number of items per page
        var isLoading = false; // Flag to prevent multiple concurrent AJAX calls

        function loadMoreFeeds() {
            if (isLoading) return;
            isLoading = true;

            $.ajax({
                url: '/Feed/GetFeeds',
                type: 'GET',
                data: { page: page, pageSize: pageSize },
                success: function (data) {
                    if (data.length > 0) {
                        page++; // Prepare the next page number
                        // Append new feeds to the existing feed container
                        data.forEach(function (feed) {
                            $('#feedContainer').append('<div>' + feed.Content + '</div>'); // Customize this line based on your data structure
                        });
                    }
                    isLoading = false;
                },
                error: function () {
                    console.error('Failed to fetch data.');
                    isLoading = false;
                }
            });
        }

        $(window).scroll(function () {
            if ($(window).scrollTop() + $(window).height() > $(document).height() - 100) {
                loadMoreFeeds(); // Load next page of feeds when scrolled near the bottom of the page
            }
        });

        loadMoreFeeds(); // Initial load



       
      
    });

    function displayFileInfo() {
        const fileInput = document.getElementById('fileInput');
        const fileInfo = document.getElementById('fileInfo');

        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            fileInfo.innerHTML = `<p>File name: ${file.name}</p>
                                  <p>File type: ${file.type}</p>
                                  <p>File size: ${file.size} bytes</p>`;
        }
    }
    function displayPreview(file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            const fileInfo = document.getElementById('fileInfo');
            if (file.type.startsWith('image/')) {
                fileInfo.innerHTML += `<img src="${e.target.result}" alt="File Preview" style="max-width: 200px;">`;
            } else if (file.type.startsWith('video/')) {
                fileInfo.innerHTML += `<video src="${e.target.result}" controls style="max-width: 200px;"></video>`;
            }
        };
        reader.readAsDataURL(file);
    }


    function loadFiles(event) {
        var files = event.target.files; // FileList object containing the list of files

        // Clear existing images
        var container = document.getElementById('imageContainer');
        container.innerHTML = '';

        // Loop through the FileList
        for (var i = 0, file; file = files[i]; i++) {
            // Only process image files.
            if (!file.type.match('image.*')) {
                continue;
            }

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (theFile, index) {
                return function (e) {
                    var imgWrapper = document.createElement('div');
                    imgWrapper.classList.add('image-wrapper');
                    imgWrapper.style.position = 'relative';
                    imgWrapper.style.display = 'inline-block';
                    imgWrapper.style.margin = '10px';

                    // Create an img element and set its src attribute to the file's data URL
                    var img = document.createElement('img');
                    img.src = e.target.result;
                    img.style.width = "100px"; // Optional: set image size
                    img.style.height = "100px"; // Optional: set image size
                    img.style.padding = "5px"; // Optional: add padding

                    // Create a remove button for the image
                    var removeBtn = document.createElement('button');
                    removeBtn.textContent = 'X';
                    removeBtn.style.position = 'absolute';
                    removeBtn.style.top = '0';
                    removeBtn.style.right = '0';
                    removeBtn.onclick = function () {
                        container.removeChild(imgWrapper);
                    };

                    // Append the img element and remove button to the wrapper
                    imgWrapper.appendChild(img);
                    imgWrapper.appendChild(removeBtn);

                    // Append the wrapper to the container
                    container.appendChild(imgWrapper);
                };
            })(file, i);

            // Read in the image file as a data URL.
            reader.readAsDataURL(file);
        }
    }

    function loadVideos(event) {
        var files = event.target.files; // FileList object containing the list of video files

        // Clear existing videos
        var container = document.getElementById('videoContainer');
        container.innerHTML = '';

        // Loop through the FileList
        for (var i = 0, file; file = files[i]; i++) {
            // Only process video files.
            if (!file.type.match('video.*')) {
                continue;
            }

            var reader = new FileReader();

            // Closure to capture the file information.
            reader.onload = (function (theFile, index) {
                return function (e) {
                    var videoWrapper = document.createElement('div');
                    videoWrapper.classList.add('video-wrapper');
                    videoWrapper.style.position = 'relative';
                    videoWrapper.style.display = 'inline-block';
                    videoWrapper.style.margin = '10px';

                    // Create a video element and set its src attribute to the file's data URL
                    var video = document.createElement('video');
                    video.src = e.target.result;
                    video.style.width = "300px"; // Set video size
                    video.style.height = "auto"; // Maintain aspect ratio
                    video.controls = true; // Add controls so the user can play/pause, adjust volume, etc.

                    // Create a remove button for the video
                    var removeBtn = document.createElement('button');
                    removeBtn.textContent = 'X';
                    removeBtn.style.position = 'absolute';
                    removeBtn.style.top = '0';
                    removeBtn.style.right = '0';
                    removeBtn.onclick = function () {
                        container.removeChild(videoWrapper);
                    };

                    // Append the video element and remove button to the wrapper
                    videoWrapper.appendChild(video);
                    videoWrapper.appendChild(removeBtn);

                    // Append the wrapper to the container
                    container.appendChild(videoWrapper);
                };
            })(file, i);

            // Read in the video file as a data URL.
            reader.readAsDataURL(file);
        }
    }



</script>
<script>
    function sharePost(event,post,id) {
        event.preventDefault(); // Prevent the default link behavior
        const postUrl = 'https://www.obosi.ng/UserDashboard/Post?Id=' + id;
        if (navigator.share) {
            // Use the Web Share API if supported
            navigator.share({
                title: 'post on obosi.ng',
                text: post,
                url: postUrl
            }).then(() => {
                console.log('Thanks for sharing!');
            }).catch((error) => {
                console.error('Error sharing:', error);
            });
        } else {
            // Fallback for browsers that do not support the Web Share API
            // For example, you can copy the URL to the clipboard
            const postUrl = window.location.href;
            navigator.clipboard.writeText(postUrl).then(() => {
                alert('Post URL copied to clipboard!');
            }).catch((error) => {
                console.error('Error copying URL:', error);
            });
        }
    }
    document.getElementById('emoji-btn').addEventListener('click', function (event) {
        event.preventDefault(); // Prevent the default link behavior
        var spanElement = document.getElementById('emoji-span');
        // Toggle the background color class
        if (spanElement.classList.contains('span-bg-default')) {
            spanElement.classList.remove('span-bg-default');
            spanElement.classList.add('span-bg-changed');
        } else {
            spanElement.classList.remove('span-bg-changed');
            spanElement.classList.add('span-bg-default');
        }
    });

    function likePost(itemId) {
        event.preventDefault();  // Prevent the default anchor click behavior
        var idValue = "#" + itemId;
        var likeId =  "#likeCount_" + itemId
        // $(idVakue).addClass('span-bg-changed');
        // $(idVakue).removeClass('bg-transparent');

        if ($(idValue).hasClass('bg-transparent')) {
            $(idValue).addClass('span-bg-changed');   // Add 'span-bg-changed' if 'bg-transparent' is present
            $(idValue).removeClass('bg-transparent'); // Remove 'bg-transparent'
           // $(idValue).text(parseInt($(likeId).text()) + 1 +" Like(s)")
        } else {
            // Optionally handle the case where 'bg-transparent' is not present
            $(idValue).removeClass('span-bg-changed');  // You might want to remove 'span-bg-changed' if 'bg-transparent' is not there
            $(idValue).addClass('bg-transparent');
            if (parseInt($(likeId).text()) > 0) {
               // $(idValue).text(parseInt($(likeId).text()) - 1 + " Like(s)")// Re-add 'bg-transparent' for toggle effect
            }
        }


        $.ajax({
            type: "POST",
            url: "@Url.Action("LikePost", "UserDashboard")",
            dataType: "json",
            data: { postId: itemId }, // Pass data as an object
            success: SuccessFunc,
            error: ErrorFunc
        });

        function SuccessFunc() {
            
           
        }

        function ErrorFunc() {
            alert("Operation failed!");
        }

    }

</script>
